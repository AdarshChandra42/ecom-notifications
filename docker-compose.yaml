version: '3.8'

services:
  # Database
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
    - mongo-data:/data/db
    - ./docker/mongo/mongod.conf:/etc/mongod.conf
    - ./docker/mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    command: ["mongod", "--config", "/etc/mongod.conf"]

  # Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"   # AMQP protocol port
      - "15672:15672" # Management UI port
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - app-network
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    volumes:
    - rabbitmq-data:/var/lib/rabbitmq
    - ./docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    - ./docker/rabbitmq/enabled_plugins:/etc/rabbitmq/enabled_plugins

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: user-service
    ports:
      - "4001:4001"
    environment:
      - PORT=4001
      - MONGO_URI=mongodb://mongodb:27017/user-service
      - RABBITMQ_URI=amqp://guest:guest@rabbitmq:5672
      - JWT_SECRET=your_super_secret_key_for_jwt
      - NODE_ENV=development
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "4002:4002"
    environment:
      - PORT=4002
      - MONGO_URI=mongodb://mongodb:27017/notification-service
      - RABBITMQ_URI=amqp://guest:guest@rabbitmq:5672
      - JWT_SECRET=your_super_secret_key_for_jwt
      - NODE_ENV=development
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      user-service:
        condition: service_started
    networks:
      - app-network
    restart: unless-stopped

  # Recommendation Service
  recommendation-service:
    build:
      context: ./services/recommendation-service
      dockerfile: Dockerfile
    container_name: recommendation-service
    ports:
      - "4003:4003"
    environment:
      - PORT=4003
      - MONGO_URI=mongodb://mongodb:27017/recommendation-service
      - RABBITMQ_URI=amqp://guest:guest@rabbitmq:5672
      - JWT_SECRET=your_super_secret_key_for_jwt
      - USER_SERVICE_URL=http://user-service:4001/graphql
      - NOTIFICATION_SERVICE_URL=http://notification-service:4002/graphql
      - GENERATE_MOCK_DATA=true
      - NODE_ENV=development
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      user-service:
        condition: service_started
      notification-service:
        condition: service_started
    networks:
      - app-network
    restart: unless-stopped

  # Apollo Gateway
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: apollo-gateway
    ports:
      - "4000:4000"
    environment:
      - PORT=4000
      - JWT_SECRET=your_super_secret_key_for_jwt
      - USER_SERVICE_URL=http://user-service:4001/graphql
      - NOTIFICATION_SERVICE_URL=http://notification-service:4002/graphql
      - RECOMMENDATION_SERVICE_URL=http://recommendation-service:4003/graphql
      - CACHE_TTL=300
      - NODE_ENV=development
    depends_on:
      - user-service
      - notification-service
      - recommendation-service
    networks:
      - app-network
    restart: unless-stopped

networks:
  app-network:
    driver: bridge

volumes:
  mongo-data:
  rabbitmq-data:
